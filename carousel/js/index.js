(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var ReactCSSTransitionGroup = React.addons.CSSTransitionGroup;
var SlideItem = require('./slideItem.jsx');
var SlideArrow = require('./slideArrow.jsx');
var SlideBullet = require('./slideBullet.jsx');

var Slide = React.createClass({displayName: "Slide",
    getInitialState:function(){
        var isloop= this.props.autoplay ? true : this.props.isLoop;
        var isarrow= this.props.arrow ? this.props.arrow : true;
        var isbullet= this.props.bullet ? this.props.bullet : true;
        var mousepause= this.props.mousepause ? this.props.mousepause : true;
        var speed= this.props.speed ? this.props.speed : 300;
        var delay= this.props.delay ? this.props.delay : 8000;

        return{
            slides : this.props.slides,
            speed : speed,
            delay : delay,
            mousepause : mousepause,
            isbullet : isbullet,
            isarrow : isarrow,
            isLoop : isloop,
            autoPlay : this.props.autoplay,
            currentIndex :  0,
            transitionName : "carousel2"
        }
    },
    componentDidMount : function () {
        this.autoPlayPause();
        this.autoPlayStart();
    },
    handleMouseOver : function () {
        if (!this.state.mousepause) {
            return false;
        }
        this.autoPlayPause();
    },
    handleMouseOut : function () {
        if (!this.state.mousepause) {
            return false;
        }
        this.autoPlayPause();
        this.autoPlayStart();
    },
    autoPlayStart : function () {
        if (this.state.autoPlay){
            this.timer = setInterval(function () {
                this.handleNext();
            }.bind(this),this.state.delay);
        }
    },
     autoPlayPause : function () {
        if (this.timer){
            clearInterval(this.timer);
            this.timer = null;
        }
    },
    handlePrev : function(){
    var curIndex = this.state.currentIndex;
        if(curIndex <= 0){
            curIndex = this.state.isLoop ? this.state.slides.length : 1;
        };
        this.setState({
            transitionName : "carousel1",
            currentIndex : --curIndex
        });
        this.autoPlayPause();
        this.autoPlayStart();

    },
    handleNext : function(){
        var curIndex = this.state.currentIndex;
        if(curIndex >= this.state.slides.length-1){
            curIndex = this.state.isLoop ? -1 :this.state.slides.length-2 ;
        };
        this.setState({
        transitionName : "carousel2",
            currentIndex : ++curIndex
        });
        this.autoPlayPause();
        this.autoPlayStart();
    },
    handleBullet : function(i){
        var curIndex = this.state.currentIndex;
        var tsName = i >= curIndex ? "carousel2" : "carousel1";
        this.setState({
        transitionName : tsName,
            currentIndex : i
        });
        this.autoPlayPause();
        this.autoPlayStart();
    },
    render:function(){
        var index = this.state.currentIndex,imgSrcs = this.state.slides;
        return (
            React.createElement("div", {className: "content", onMouseOver: this.handleMouseOver.bind(this), onMouseOut: this.handleMouseOut.bind(this)}, 
                React.createElement(SlideItem, {transitionName: this.state.transitionName, transitionTime: this.state.speed, imageInfo: imgSrcs[index]}), 
                React.createElement(SlideArrow, {handlePrev: this.handlePrev, handleNext: this.handleNext}, " "), 
                React.createElement(SlideBullet, {handleBullet: this.handleBullet, currentIndex: index, slides: imgSrcs}, " ")
            )
        );
    }
});
module.exports = Slide;
},{"./slideArrow.jsx":2,"./slideBullet.jsx":3,"./slideItem.jsx":4}],2:[function(require,module,exports){

var SlideArrow = React.createClass({displayName: "SlideArrow",
    handlePrevArrow : function(){
        this.props.handlePrev();
    },
    handleNextArrow : function(){
       this.props.handleNext();
    },
    render:function(){
        return (
            React.createElement("div", {className: "Arrow"}, 
                React.createElement("div", {onClick: this.handlePrevArrow, className: "turnBtn prev"}), 
                React.createElement("div", {onClick: this.handleNextArrow, className: "turnBtn next"})
            )
        );
    }
});
module.exports = SlideArrow;
},{}],3:[function(require,module,exports){

var SlideBullet = React.createClass({displayName: "SlideBullet",
    handleBulletChange : function(i){
        this.props.handleBullet(i);
    },
    render:function(){
        var index = this.props.currentIndex,imgSrcs = this.props.slides,bullets=null;
        bullets = imgSrcs.map(function(item,i){
            var isActive = index==i ? "circle active" : "circle";
                return(
                    React.createElement("span", {className: isActive, onClick: this.handleBulletChange.bind(this,i)})
                )
            }.bind(this));
        return (
                React.createElement("div", {className: "bullets"}, 
                    bullets
                )
        );
    }
});
module.exports = SlideBullet;
},{}],4:[function(require,module,exports){
var ReactCSSTransitionGroup = React.addons.CSSTransitionGroup;
var SlideItem = React.createClass({displayName: "SlideItem",
    propTypes: {
        transitionName: React.PropTypes.string.isRequired,
        transitionTime:  React.PropTypes.number.isRequired,
        imageInfo: React.PropTypes.string.isRequired
    },
    render:function(){
        return(
            React.createElement("div", {className: "carousel"}, 
                React.createElement(ReactCSSTransitionGroup, {transitionName: this.props.transitionName, transitionEnterTimeout: this.props.transitionTime, transitionLeaveTimeout: this.props.transitionTime}, 
                React.createElement("img", {src: this.props.imageInfo.src, key: this.props.imageInfo.src, className: "img", alt: this.props.imageInfo.alt})
                )
            )
        );  
    }
});
module.exports = SlideItem;
},{}],5:[function(require,module,exports){

var Slide = require('./components/slide.jsx');
var slides =[
    {
        src:"http://img.aimoge.com/FlHO5pnUCDAxGu4f3TQMVmhAUN3f",
        alt:"img1"
    },
    {
        src:"http://img.aimoge.com/FrYdmICVvgTTbwAPZ2FL-pPgirgs",
        alt:"img2"
    },
        {
        	src:"http://img.aimoge.com/FjBLISfzptUYX12mz7o-ki1MpgBG",
        alt:"img2"
    },
    {
    	src:"http://img.aimoge.com/Fj3zqUGLvq0ADWHP_55HfJv2WuNB",
        alt:"img2"
    }
    ];
    //speed为切换速度，delay为轮播速度
    //mousepause简单设置为如果鼠标停留在区域内则会暂停轮播，当进行按钮点击操作切换图片时，则又会启动轮播。
ReactDOM.render(
			React.createElement(Slide, {slides: slides, speed: 300, delay: 8000, arrow: true, bullet: true, mousepause: true, isLoop: true, autoplay: true}),
			document.getElementById('container')
		);
},{"./components/slide.jsx":1}]},{},[5,1,2,3,4])

//# sourceMappingURL=data:application/json;charset=utf-8;base64,